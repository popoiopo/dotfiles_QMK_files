#+STARTIP: overview
* Python

#+BEGIN_SRC emacs-lisp
    ; If there are no archived package contents, refresh them
    (when (not package-archive-contents)
      (package-refresh-contents))

    ;; Installs packages
    ;;
    ;; myPackages contains a list of package names
    (defvar myPackages
      '(better-defaults                 ;; Set up some better Emacs defaults
        elpy                            ;; Emacs Lisp Python Environment
        flycheck                        ;; On the fly syntax checking
        py-autopep8                     ;; Run autopep8 on save
        blacken                         ;; Black formatting on safe (kind of autopep8)
        magit                           ;; Git integration
        ein                             ;; Emacs IPython Notebook
        jedi
        )
      )

    ;; Scans the list in myPackages
    ;; If the package listed is not already installed, install it
    (mapc #'(lambda (package)
              (unless (package-installed-p package)
                (package-install package)))
          myPackages)

    ;; ====================================
    ;; Development Setup
    ;; ====================================
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (with-eval-after-load 'python
        '(let ((python-shell-completion-native-enable t)
             (python-shell-completion-native-output-timeout
              python-shell-completion-native-try-output-timeout))
         (python-shell-completion-native-get-completions
          (get-buffer-process (current-buffer))
          nil "_"))))
 
    (use-package elpy
      :ensure t
      :config
      (elpy-enable))

    ;; Enable Flycheck
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))

    (use-package jedi
      :ensure t
      :init
      (add-hook 'elpy-mode-hook 'jedi:setup)
      (add-hook 'elpy-mode-hook 'jedi:ac-setup))

    ;; Enable autopep8
    (require 'py-autopep8)
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

* Basic improvements
** Basics
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)    ;; Keep from making huge jumps
  (setq ring-bell-function 'ignore)   ;; Unable annoying sounds
  (setq visible-bell 1)               ;; disable annoying windows sound
  (setq inhibit-startup-message t)    ;; Hide the startup message
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (setq-default display-line-numbers 'relative)
  (global-auto-revert-mode t)
  (use-package try
    :ensure t)
  (use-package page-break-lines
    :ensure t
    :init
    (turn-on-page-break-lines-mode))
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\{ . ?\})
                              ))
  (electric-pair-mode t)

  (tool-bar-mode -1)                  ;; Get rid of tool-bar
  (menu-bar-mode -1)                  ;; Git rid of menu
  (scroll-bar-mode -1)                ;; Get rid of scroll-bar

  (defalias 'yes-or-no-p 'y-or-n-p)   ;; Replace yes questions to y

  (when window-system (global-hl-line-mode t))            ;; Get a current line shadow in IDE

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))                  ;; Enable small light to show where current frame is

  (use-package which-key
    :ensure t
    :init
    (which-key-mode))                 ;; Upon C-x get a list of possible options
#+END_SRC

** subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** popup kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

* Org

** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** basic-config
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  (setq org-agenda-files (quote ("c:/Users/chatel/Desktop/ORG/test.org")))
#+END_SRC

** org-indent
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* IDO

** enable ido mode

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex
mx ido emulator
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

** switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Buffers

** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** expert
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** allways kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* config edit/reload

** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

* window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* Convenient function

** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

* Hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC

* Debug

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'debug
    (defun debugger-setup-buffer (debugger-args)
      "Initialize the `*Backtrace*' buffer for entry to the debugger.
  That buffer should be current already."
      (setq buffer-read-only nil)
      (erase-buffer)
      (set-buffer-multibyte t)        ;Why was it nil ?  -stef
      (setq buffer-undo-list t)
      (let ((standard-output (current-buffer))
	    (print-escape-newlines t)
	    (print-level 8)
	    (print-length 50))
	(backtrace))
      (goto-char (point-min))
      (delete-region (point)
		     (progn
		       (search-forward "\n  debug(")
		       (forward-line (if (eq (car debugger-args) 'debug)
					 2    ; Remove implement-debug-on-entry frame.
				       1))
		       (point)))
      (insert "Debugger entered")
      ;; lambda is for debug-on-call when a function call is next.
      ;; debug is for debug-on-entry function called.
      (pcase (car debugger-args)
	((or `lambda `debug)
	 (insert "--entering a function:\n"))
	;; Exiting a function.
	(`exit
	 (insert "--returning value: ")
	 (setq debugger-value (nth 1 debugger-args))
	 (prin1 debugger-value (current-buffer))
	 (insert ?\n)
	 (delete-char 1)
	 (insert ? )
	 (beginning-of-line))
	;; Debugger entered for an error.
	(`error
	 (insert "--Lisp error: ")
	 (prin1 (nth 1 debugger-args) (current-buffer))
	 (insert ?\n))
	;; debug-on-call, when the next thing is an eval.
	(`t
	 (insert "--beginning evaluation of function call form:\n"))
	;; User calls debug directly.
	(_
	 (insert ": ")
	 (prin1 (if (eq (car debugger-args) 'nil)
		    (cdr debugger-args) debugger-args)
		(current-buffer))
	 (insert ?\n)))
      ;; After any frame that uses eval-buffer,
      ;; insert a line that states the buffer position it's reading at.
      (save-excursion
	(let ((tem eval-buffer-list))
	  (while (and tem
		      (re-search-forward "^  eval-\\(buffer\\|region\\)(" nil t))
	    (beginning-of-line)
	    (insert (apply 'format "Error at line %d, column %d (point %d) in %s\n"
                     (with-current-buffer (car tem)
                       (list (line-number-at-pos (point))
                             (current-column)
                             (point)
                             (buffer-name)))))
	    (pop tem))))
      (debugger-make-xrefs)))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
      (setq dashboard-items '((recents  . 10)))
      (setq dashboard-banner-logo-title "Een hele goede dag! Veel plezier met emacs he, ja toch, ja toch niet dan")
      (setq dashboard-footer "Niet vergeten he! C-x C-s"))
#+END_SRC

* auto completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

* modeline

** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode))
#+END_SRC

* dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC

* symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC

* mark-multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))

  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

* yassnippet

** Loading yassnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (use-package yasnippet-snippets
              :ensure t)
    (yas-reload-all))

  (yas-global-mode 1)

#+END_SRC

* swiper/counsel/ivy
#+BEGIN_SRC emacs-lisp
  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
  :ensure t
  )

  (use-package counsel
    :bind (("M-y" . counsel-yank-pop)
           :map ivy-minibuffer-map
           ("M-y" . ivy-next-line)))

  (use-package swiper
  :ensure try
  :config
  (progn
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-load-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ))
#+END_SRC

* Reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)
#+END_SRC

* ESS
#+BEGIN_SRC emacs-lisp
  (setq inferior-ess-r-program "c:/Program Files/R/R-3.6.2/bin/R.exe")
  (require 'ess-smart-underscore)
#+END_SRC

* Narrowing
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC

* Web mode / emmet
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-engines-alist
  '(("django"    . "\\.html\\'")))
  (setq web-mode-ac-sources-alist
  '(("css" . (ac-source-css-property))
  ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-quoting t)) ; this fixes the quote problem I mentioned

  (use-package emmet-mode
  :ensure t
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  )
#+END_SRC
